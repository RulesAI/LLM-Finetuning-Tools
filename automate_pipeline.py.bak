import os
import sys
import json
import logging
import argparse
import subprocess
from pathlib import Path

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("pipeline.log"),
        logging.StreamHandler()
    ]
)

class Pipeline:
    def __init__(self, pdf_path=None, output_dir="output", skip_existing=False):
        self.pdf_path = pdf_path
        self.output_dir = Path(output_dir)
        self.skip_existing = skip_existing
        
        # 确保输出目录存在
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # 各处理阶段的输出文件
        self.processed_content_file = self.output_dir / "processed_content.txt"
        self.segmented_content_file = self.output_dir / "segmented_content.json"
        self.qa_pairs_file = self.output_dir / "qa_instructions_robust.json"
        self.qa_pairs_chatglm_file = self.output_dir / "qa_instructions_chatglm_robust.jsonl"
        self.fixed_qa_pairs_file = self.output_dir / "qa_instructions_fixed_improved.json"
        self.fixed_qa_pairs_chatglm_file = self.output_dir / "qa_instructions_chatglm_fixed_improved.jsonl"
        self.high_quality_qa_file = self.output_dir / "high_quality_qa.json"
        self.high_quality_qa_chatglm_file = self.output_dir / "high_quality_qa.jsonl"
        
        # 各阶段处理脚本
        self.scripts = {
            "extract": "tunning.py",
            "segment": "segment.py",
            "generate_qa": "generate_qa_pairs_improved.py",
            "fix_qa": "fix_qa_pairs_improved.py",
            "quality_check": "ensure_high_quality.py"
        }
        
        # 检查脚本是否存在
        for name, script in self.scripts.items():
            if not Path(script).exists():
                logging.error(f"缺少必要的脚本文件: {script}")
                raise FileNotFoundError(f"缺少必要的脚本文件: {script}")
    
    def extract_pdf_content(self):
        """从PDF提取内容"""
        if self.skip_existing and self.processed_content_file.exists():
            logging.info(f"跳过PDF内容提取，使用现有文件: {self.processed_content_file}")
            return True
        
        if not self.pdf_path:
            logging.error("未提供PDF文件路径")
            return False
        
        try:
            cmd = [sys.executable, self.scripts["extract"], "--pdf", self.pdf_path, "--output", str(self.processed_content_file)]
            logging.info(f"执行命令: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logging.error(f"PDF内容提取失败: {result.stderr}")
                return False
            
            logging.info(f"PDF内容提取成功，结果保存到: {self.processed_content_file}")
            return True
        
        except Exception as e:
            logging.error(f"执行PDF内容提取时出错: {str(e)}")
            return False
    
    def segment_content(self):
        """对文本内容进行语义分段"""
        if self.skip_existing and self.segmented_content_file.exists():
            logging.info(f"跳过内容分段，使用现有文件: {self.segmented_content_file}")
            return True
        
        if not self.processed_content_file.exists():
            logging.error(f"找不到PDF处理后的内容文件: {self.processed_content_file}")
            return False
        
        try:
            cmd = [
                sys.executable, 
                self.scripts["segment"], 
                "--input", str(self.processed_content_file), 
                "--output", str(self.segmented_content_file)
            ]
            logging.info(f"执行命令: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logging.error(f"内容分段失败: {result.stderr}")
                return False
            
            logging.info(f"内容分段成功，结果保存到: {self.segmented_content_file}")
            return True
        
        except Exception as e:
            logging.error(f"执行内容分段时出错: {str(e)}")
            return False
    
    def generate_qa_pairs(self):
        """生成问答对"""
        if self.skip_existing and self.qa_pairs_file.exists() and self.qa_pairs_chatglm_file.exists():
            logging.info(f"跳过问答对生成，使用现有文件")
            return True
        
        if not self.segmented_content_file.exists():
            logging.error(f"找不到分段内容文件: {self.segmented_content_file}")
            return False
        
        try:
            # 使用命令行参数直接指定输入文件和输出目录
            cmd = [
                sys.executable, 
                self.scripts["generate_qa"], 
                "--input", str(self.segmented_content_file),
                "--output_dir", str(self.output_dir)
            ]
            
            logging.info(f"执行命令: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logging.error(f"问答对生成失败: {result.stderr}")
                return False
            
            # 验证输出文件是否存在
            if not self.qa_pairs_file.exists():
                logging.warning(f"未找到生成的JSON文件: {self.qa_pairs_file}")
                # 尝试在当前目录查找
                if Path("qa_instructions_robust.json").exists():
                    try:
                        os.rename("qa_instructions_robust.json", str(self.qa_pairs_file))
                        logging.info(f"从当前目录移动JSON文件到输出目录: {self.qa_pairs_file}")
                    except:
                        with open("qa_instructions_robust.json", 'r', encoding='utf-8') as src:
                            with open(str(self.qa_pairs_file), 'w', encoding='utf-8') as dst:
                                dst.write(src.read())
                        logging.info(f"复制JSON文件到输出目录: {self.qa_pairs_file}")
            
            if not self.qa_pairs_chatglm_file.exists():
                logging.warning(f"未找到生成的JSONL文件: {self.qa_pairs_chatglm_file}")
                # 尝试在当前目录查找
                if Path("qa_instructions_chatglm_robust.jsonl").exists():
                    try:
                        os.rename("qa_instructions_chatglm_robust.jsonl", str(self.qa_pairs_chatglm_file))
                        logging.info(f"从当前目录移动JSONL文件到输出目录: {self.qa_pairs_chatglm_file}")
                    except:
                        with open("qa_instructions_chatglm_robust.jsonl", 'r', encoding='utf-8') as src:
                            with open(str(self.qa_pairs_chatglm_file), 'w', encoding='utf-8') as dst:
                                dst.write(src.read())
                        logging.info(f"复制JSONL文件到输出目录: {self.qa_pairs_chatglm_file}")
            
            # 最终验证文件是否存在
            if not self.qa_pairs_file.exists() or not self.qa_pairs_chatglm_file.exists():
                logging.error(f"无法找到生成的问答对文件")
                return False
            
            logging.info(f"问答对生成成功，结果保存到输出目录")
            return True
        
        except Exception as e:
            logging.error(f"执行问答对生成时出错: {str(e)}")
            return False
    
    def fix_qa_pairs(self):
        """修复和改进问答对"""
        if self.skip_existing and self.fixed_qa_pairs_file.exists() and self.fixed_qa_pairs_chatglm_file.exists():
            logging.info(f"跳过问答对修复，使用现有文件")
            return True
        
        if not self.qa_pairs_file.exists() or not self.qa_pairs_chatglm_file.exists():
            logging.error(f"找不到问答对文件")
            return False
        
        try:
            # 使用命令行参数指定输入文件和输出目录
            cmd = [
                sys.executable, 
                self.scripts["fix_qa"], 
                "--input_json", str(self.qa_pairs_file),
                "--input_jsonl", str(self.qa_pairs_chatglm_file),
                "--output_dir", str(self.output_dir)
            ]
            
            logging.info(f"执行命令: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logging.error(f"问答对修复失败: {result.stderr}")
                return False
            
            # 确定期望的输出文件名
            expected_json = os.path.join(self.output_dir, os.path.basename(self.qa_pairs_file).replace('.json', '_improved.json'))
            expected_jsonl = os.path.join(self.output_dir, os.path.basename(self.qa_pairs_chatglm_file).replace('.jsonl', '_improved.jsonl'))
            
            # 更新文件路径
            self.fixed_qa_pairs_file = Path(expected_json)
            self.fixed_qa_pairs_chatglm_file = Path(expected_jsonl)
            
            # 检查文件是否已生成
            if not self.fixed_qa_pairs_file.exists():
                logging.warning(f"未找到修复后的JSON文件: {self.fixed_qa_pairs_file}")
                
                # 尝试在当前目录查找
                alternative_json = Path(os.path.basename(expected_json))
                if alternative_json.exists():
                    try:
                        os.rename(alternative_json, self.fixed_qa_pairs_file)
                        logging.info(f"从当前目录移动JSON文件到输出目录: {self.fixed_qa_pairs_file}")
                    except:
                        with open(alternative_json, 'r', encoding='utf-8') as src:
                            with open(self.fixed_qa_pairs_file, 'w', encoding='utf-8') as dst:
                                dst.write(src.read())
                        logging.info(f"复制JSON文件到输出目录: {self.fixed_qa_pairs_file}")
            
            if not self.fixed_qa_pairs_chatglm_file.exists():
                logging.warning(f"未找到修复后的JSONL文件: {self.fixed_qa_pairs_chatglm_file}")
                
                # 尝试在当前目录查找
                alternative_jsonl = Path(os.path.basename(expected_jsonl))
                if alternative_jsonl.exists():
                    try:
                        os.rename(alternative_jsonl, self.fixed_qa_pairs_chatglm_file)
                        logging.info(f"从当前目录移动JSONL文件到输出目录: {self.fixed_qa_pairs_chatglm_file}")
                    except:
                        with open(alternative_jsonl, 'r', encoding='utf-8') as src:
                            with open(self.fixed_qa_pairs_chatglm_file, 'w', encoding='utf-8') as dst:
                                dst.write(src.read())
                        logging.info(f"复制JSONL文件到输出目录: {self.fixed_qa_pairs_chatglm_file}")
            
            # 最终验证文件是否存在
            if not self.fixed_qa_pairs_file.exists() or not self.fixed_qa_pairs_chatglm_file.exists():
                logging.error(f"无法找到修复后的问答对文件")
                return False
            
            logging.info(f"问答对修复成功，结果保存到输出目录")
            return True
        
        except Exception as e:
            logging.error(f"执行问答对修复时出错: {str(e)}")
            return False
    
    def quality_check(self):
        """质量检查和高质量问答对提取"""
        if self.skip_existing and self.high_quality_qa_file.exists() and self.high_quality_qa_chatglm_file.exists():
            logging.info(f"跳过质量检查，使用现有文件")
            return True
        
        if not self.fixed_qa_pairs_file.exists() or not self.fixed_qa_pairs_chatglm_file.exists():
            logging.error(f"找不到修复后的问答对文件")
            return False
        
        try:
            # 为确保兼容性，准备ensure_high_quality.py需要的输入文件
            input_files = {
                "qa_instructions_fixed_improved.json": self.fixed_qa_pairs_file,
                "qa_instructions_chatglm_fixed_improved.jsonl": self.fixed_qa_pairs_chatglm_file
            }
            
            for dst_name, src_file in input_files.items():
                dst_file = Path(dst_name)
                # 如果输入文件不在工作目录，创建符号链接或复制
                if not dst_file.exists():
                    try:
                        os.symlink(src_file, dst_file)
                        logging.info(f"创建符号链接: {dst_file}")
                    except:
                        with open(src_file, 'r', encoding='utf-8') as src:
                            with open(dst_file, 'w', encoding='utf-8') as dst:
                                dst.write(src.read())
                        logging.info(f"复制文件: {dst_file}")
            
            # 使用命令行参数指定输出目录
            cmd = [
                sys.executable, 
                self.scripts["quality_check"], 
                "--output_dir", str(self.output_dir)  # 假设quality_check脚本支持此参数
            ]
            
            logging.info(f"执行命令: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logging.error(f"质量检查失败: {result.stderr}")
                return False
            
            # 确认输出文件位置
            qa_json = Path("high_quality_qa.json")
            qa_jsonl = Path("high_quality_qa.jsonl")
            
            # 移动输出文件到目标位置
            if qa_json.exists():
                try:
                    os.rename(qa_json, self.high_quality_qa_file)
                except:
                    with open(qa_json, 'r', encoding='utf-8') as src:
                        with open(self.high_quality_qa_file, 'w', encoding='utf-8') as dst:
                            dst.write(src.read())
                    logging.info(f"复制高质量问答对JSON文件到: {self.high_quality_qa_file}")
            
            if qa_jsonl.exists():
                try:
                    os.rename(qa_jsonl, self.high_quality_qa_chatglm_file)
                except:
                    with open(qa_jsonl, 'r', encoding='utf-8') as src:
                        with open(self.high_quality_qa_chatglm_file, 'w', encoding='utf-8') as dst:
                            dst.write(src.read())
                    logging.info(f"复制高质量问答对JSONL文件到: {self.high_quality_qa_chatglm_file}")
            
            # 同时移动质量报告
            for report_file in Path('.').glob('quality_report_*.json'):
                dst_report = self.output_dir / report_file.name
                try:
                    os.rename(report_file, str(dst_report))
                except:
                    with open(report_file, 'r', encoding='utf-8') as src:
                        with open(str(dst_report), 'w', encoding='utf-8') as dst:
                            dst.write(src.read())
            
            # 验证高质量问答对文件是否存在
            if not self.high_quality_qa_file.exists() or not self.high_quality_qa_chatglm_file.exists():
                logging.warning(f"质量检查完成，但未找到高质量问答对文件")
                # 这种情况可能是质量检查后没有筛选出足够高质量的问答对，允许继续执行
            
            logging.info(f"质量检查成功，结果保存到输出目录")
            return True
        
        except Exception as e:
            logging.error(f"执行质量检查时出错: {str(e)}")
            return False
    
    def run(self):
        """运行完整的处理流程"""
        logging.info("开始执行完整处理流程...")
        
        # 步骤1: 提取PDF内容
        if self.pdf_path:
            if not self.extract_pdf_content():
                logging.error("PDF内容提取失败，终止流程")
                return False
        else:
            logging.warning("未提供PDF路径，跳过提取步骤")
        
        # 步骤2: 语义分段
        if not self.segment_content():
            logging.error("语义分段失败，终止流程")
            return False
        
        # 步骤3: 生成问答对
        if not self.generate_qa_pairs():
            logging.error("问答对生成失败，终止流程")
            return False
        
        # 步骤4: 修复问答对
        if not self.fix_qa_pairs():
            logging.error("问答对修复失败，终止流程")
            return False
        
        # 步骤5: 质量检查和高质量数据提取
        if not self.quality_check():
            logging.error("质量检查失败，终止流程")
            return False
        
        logging.info("完整处理流程执行成功!")
        
        # 显示处理结果
        self.report_stats()
        
        return True
    
    def report_stats(self):
        """报告处理结果统计"""
        try:
            stats = {
                "原始PDF内容": self.processed_content_file.exists(),
                "语义分段数": 0,
                "生成问答对数": 0,
                "修复后问答对数": 0,
                "高质量问答对数": 0
            }
            
            # 统计分段数
            if self.segmented_content_file.exists():
                with open(self.segmented_content_file, 'r', encoding='utf-8') as f:
                    segments = json.load(f)
                    stats["语义分段数"] = len(segments)
            
            # 统计问答对数
            if self.qa_pairs_file.exists():
                with open(self.qa_pairs_file, 'r', encoding='utf-8') as f:
                    qa_pairs = json.load(f)
                    stats["生成问答对数"] = len(qa_pairs)
            
            # 统计修复后问答对数
            if self.fixed_qa_pairs_file.exists():
                with open(self.fixed_qa_pairs_file, 'r', encoding='utf-8') as f:
                    fixed_qa_pairs = json.load(f)
                    stats["修复后问答对数"] = len(fixed_qa_pairs)
            
            # 统计高质量问答对数
            if self.high_quality_qa_file.exists():
                with open(self.high_quality_qa_file, 'r', encoding='utf-8') as f:
                    high_quality_qa = json.load(f)
                    stats["高质量问答对数"] = len(high_quality_qa)
            
            # 打印统计结果
            logging.info("处理结果统计:")
            for key, value in stats.items():
                logging.info(f"  - {key}: {value}")
            
            # 如果有质量报告，显示摘要
            quality_reports = list(self.output_dir.glob('quality_report_*.json'))
            if quality_reports:
                logging.info("质量报告摘要:")
                for report_file in quality_reports:
                    try:
                        with open(report_file, 'r', encoding='utf-8') as f:
                            report = json.load(f)
                            filename = report.get("filename", "未知文件")
                            avg_score = report.get("average_score", 0)
                            total = report.get("total_pairs", 0)
                            excellent = report.get("score_distribution", {}).get("excellent", 0)
                            logging.info(f"  - {Path(filename).name}: 平均分数 {avg_score}, 共 {total} 对, 优秀 {excellent} 对")
                    except:
                        continue
        
        except Exception as e:
            logging.error(f"生成统计报告时出错: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description="供应链技术PDF处理自动化流程")
    parser.add_argument("--pdf", help="输入PDF文件路径")
    parser.add_argument("--output", default="output", help="输出目录，默认为'output'")
    parser.add_argument("--skip-existing", action="store_true", help="如果输出文件已存在，跳过相应步骤")
    
    args = parser.parse_args()
    
    if not args.pdf and not Path('processed_content.txt').exists():
        logging.error("必须提供PDF文件路径，或者当前目录已存在processed_content.txt文件")
        return 1
    
    pipeline = Pipeline(
        pdf_path=args.pdf,
        output_dir=args.output,
        skip_existing=args.skip_existing
    )
    
    if pipeline.run():
        logging.info(f"处理结果已保存到目录: {args.output}")
        return 0
    else:
        logging.error("处理流程未完成")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 